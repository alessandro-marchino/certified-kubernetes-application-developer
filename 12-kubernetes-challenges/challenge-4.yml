---
# ConfigMap: redis-cluster-configmap is already created. Inspect itâ€¦
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-configmap
data:
  redis.conf: |-
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file /data/nodes.conf
    cluster-migration-barrier 1
    appendonly yes
    protected-mode no
  update-node.sh: |
    #!/bin/sh
    REDIS_NODES="/data/nodes.conf"
    sed -i -e "/myself/ s/[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}/${POD_IP}/" ${REDIS_NODES}
    exec "$@"
---
# PersistentVolume - Name: redis01
# Access modes: ReadWriteOnce
# Size: 1Gi
# hostPath: /redis01, directory should be created on worker node
# ssh node01 'for i in $(seq 1 6) ; do mkdir "/redis0$i" ; done'
# for i in $(seq 1 6) ; do cat <<EOF | kubectl apply -f -
# apiVersion: v1
# kind: PersistentVolume
# metadata:
#   name: redis0$i
# spec:
#   capacity:
#     storage: 1Gi
#   volumeMode: Filesystem
#   accessModes:
#     - ReadWriteOnce
#   hostPath:
#     path: /redis0$i
# EOF
# done
---
# StatefulSet - Name: redis-cluster
# Replicas: 6
# Pods status: Running (All 6 replicas)
# Image: redis:5.0.1-alpine, Label = app: redis-cluster
# container name: redis, command: ["/conf/update-node.sh", "redis-server", "/conf/redis.conf"]
# Env: name: 'POD_IP', valueFrom: 'fieldRef', fieldPath: 'status.podIP' (apiVersion: v1)
# Ports - name: 'client', containerPort: '6379'
# Ports - name: 'gossip', containerPort: '16379'
# Volume Mount - name: 'conf', mountPath: '/conf', readOnly:'false' (ConfigMap Mount)
# Volume Mount - name: 'data', mountPath: '/data', readOnly:'false' (volumeClaim)
# volumes - name: 'conf', Type: 'ConfigMap', ConfigMap Name: 'redis-cluster-configmap',
# Volumes - name: 'conf', ConfigMap Name: 'redis-cluster-configmap', defaultMode = '0755'
# volumeClaimTemplates - name: 'data'
# volumeClaimTemplates - accessModes: 'ReadWriteOnce'
# volumeClaimTemplates - Storage Request: '1Gi'
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  labels:
    run: redis-cluster
spec:
  serviceName: redis-cluster-service
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      name: redis-cluster
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:5.0.1-alpine
        command:
        - /conf/update-node.sh
        - redis-server
        - /conf/redis.conf
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
                apiVersion: v1
        ports:
        - name: client
          containerPort: 6379
        - name: gossip
          containerPort: 16379
        volumeMounts:
        - name: conf
          mountPath: /conf
          readOnly: false
        - name: data
          mountPath: /data
          readOnly: false
      volumes:
        - name: conf
          configMap:
            name: redis-cluster-configmap
            defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi

---
# Ports - service name 'redis-cluster-service', port name: 'client', port: '6379'
# Ports - service name 'redis-cluster-service', port name: 'client', targetPort: '6379'
# Ports - service name 'redis-cluster-service', port name: 'gossip', port: '16379'
# Ports - service name 'redis-cluster-service', port name: 'gossip', targetPort: '16379'
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster-service
spec:
  selector:
    app: redis-cluster
  ports:
  - name: client
    port: 6379
    targetPort: 6379
  - name: gossip
    port: 16379
    targetPort: 16379

---
# Command: kubectl exec -it redis-cluster-0 -- redis-cli --cluster create --cluster-replicas 1 $(kubectl get pods -l app=redis-cluster -o jsonpath='{range.items[*]}{.status.podIP}:6379 {end}')
