---
# Build user information for martin in the default kubeconfig file: User = martin, client-key = /root/martin.key and client-certificate = /root/martin.crt
# Create a new context called 'developer' in the default kubeconfig file with 'user = martin' and 'cluster = kubernetes'
# kubectl config set-credentials martin --client-certificate ./martin.crt --client-key ./martin.key
# kubectl config set-context developer --cluster kubernetes --user martin
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: jekyll-site
spec:
  accessModes:
  - ReadWriteMany
  capacity:
    storage: 1Gi
  local:
    path: /site
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - node01
  persistentVolumeReclaimPolicy: Delete
  storageClassName: local-storage
  volumeMode: Filesystem
---
# 'developer-role' should have all(*) permissions for services in development namespace
# 'developer-role' should have all(*) permissions for persistentvolumeclaims in development namespace
# 'developer-role' should have all(*) permissions for pods in development namespace
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: developer-role
  namespace: development
rules:
  - apiGroups: [ "" ]
    resources: [ "pods", "persistentvolumeclaims", "services" ]
    verbs: [ "*" ]
---
# create rolebinding = developer-rolebinding, role= 'developer-role', namespace = development
# rolebinding = developer-rolebinding should be associated with user = 'martin'
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: developer-rolebinding
  namespace: development
subjects:
  - kind: User
    name: martin
    apiGroup: rbac.authorization.k8s.io
roleRef:
  kind: Role
  name: developer-role
  apiGroup: rbac.authorization.k8s.io
---
# Storage Request: 1Gi
# Access modes: ReadWriteMany
# pvc name = jekyll-site, namespace = development
# 'jekyll-site' PVC should be bound to the PersistentVolume called 'jekyll-site'
# PVC 'jekyll-site' should use storageClassName: 'local-storage'
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jekyll-site
  namespace: development
spec:
  resources:
    requests:
      storage: 1Gi
  storageClassName: local-storage
  accessModes:
    - ReadWriteMany
---
# pod: 'jekyll' has an initContainer, name: 'copy-jekyll-site', image: 'gcr.io/kodekloud/customimage/jekyll' and command: rm -rf /site/* && jekyll new /site && cd /site && bundle install
# Container 'jekyll' should run the command: cd /site && bundle install && bundle exec jekyll serve --host 0.0.0.0 --port 4000
# pod: 'jekyll', initContainer: 'copy-jekyll-site', mountPath = '/site'
# pod: 'jekyll', initContainer: 'copy-jekyll-site', volume name = 'site'
# pod: 'jekyll', container: 'jekyll', volume name = 'site'
# pod: 'jekyll', container: 'jekyll', mountPath = '/site'
# pod: 'jekyll', container: 'jekyll', image = 'gcr.io/kodekloud/customimage/jekyll-serve'
# pod: 'jekyll', uses volume called 'site' with pvc = 'jekyll-site'
# pod: 'jekyll' uses label 'run=jekyll'
apiVersion: v1
kind: Pod
metadata:
  name: jekyll
  labels:
    run: jekyll
  namespace: development
spec:
  initContainers:
  - name: copy-jekyll-site
    image: gcr.io/kodekloud/customimage/jekyll
    command:
      - /bin/sh
      - -c
      - "rm -rf /site/* && jekyll new /site && cd /site && bundle install"
    volumeMounts:
    - name: site
      mountPath: /site
  containers:
  - name: jekyll
    image: gcr.io/kodekloud/customimage/jekyll-serve
    command:
      - /bin/sh
      - -c
      - "cd /site && bundle install && bundle exec jekyll serve --host 0.0.0.0 --port 4000"
    volumeMounts:
    - name: site
      mountPath: /site
  volumes:
  - name: site
    persistentVolumeClaim:
      claimName: jekyll-site

---
# Service name should be jekyll-node-service
# Service 'jekyll-node-service' uses targetPort: '4000'
# Service 'jekyll-node-service' uses Port: '4000'
# Service 'jekyll-node-service' uses NodePort: '30097'
apiVersion: v1
kind: Service
metadata:
  name: jekyll-node-service
  namespace: development
spec:
  selector:
    run: jekyll
  type: NodePort
  ports:
  - port: 4000
    targetPort: 4000
    nodePort: 30097

---
# set context 'developer' with user = 'martin' and cluster = 'kubernetes' as the current context
# kubectl config use-context developer
---
